* Narcissus with Open Scope pattern
This repository applies the pattern described in the paper “Open Scope: A
Pragmatic JavaScript Pattern for Extensible Interpreters” (under submission) to
the JavaScript interpreter [[Narcissus][Narcissus]].

** Structure of the repository
The code for the base interpreter is located in =/lib/narcissus=.  In it, the
two files of interests are =jsexec-raw.js= and =jsexec-base.js=.  The former is
the original version of Narcissus, and the latter is the same module, but with
the “open scope pattern” applied to allow extension.

Other folders in =/lib/= contain the code for dynamic analyses and variants of
the interpreter.  These make use of the open scope pattern to extend the
interpreter without modifying its code.

The file =/lib/facets/jsexec-facets.js= contains the instrumented version of
=jsexec= with the faceted evaluation analysis, from [[austin/narcissus]].

The file =/lib/i13n.js= (/instrumentation/) contains utilities that help writing
the analyses.

The file =njs= is a Python script bundled with Narcissus that processes
command-line options and bootstraps the interpreter using the files in
=/shells=.

Some toy examples are provided under =/tests=.

** Requirements
To run Narcissus, you need to install the JavaScript interpreter [[https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey][SpiderMonkey]].
You will also need [[https://www.python.org/][Python]] (should work under 2.x and 3.x) to run the =njs= script.

To generate PNG images from the diagrams generated by the scope analysis, you
need to install a program that eats [[https://en.wikipedia.org/wiki/DOT_%2528graph_description_language%2529#Layout_programs][DOT-formatted]] files.  The ~dot~ program from
[[http://graphviz.org][Graphviz]] is sufficient.

** Running the examples
To run the interpreter interactively, just invoke ~njs~:

: ./njs

You can also specify a JavaScript file to execute:

: ./njs -f tests/do.js

To activate a dynamic analysis from the =/lib= folder, load the corresponding
layer (from =/shells/layers=) with the ~-l~ flag.

For instance, to run the faceted evaluation analysis:

: ./njs -l facets -f tests/fenton.js

For the [[??][FlowR analysis]]:

: ./njs -l flowr -f tests/flowr.js

=scope= is an analysis that creates diagrams from collected heap objects.  To
see the generated diagrams, pipe it to ~dot~ (and an eventual image viewer):

: ./njs -l scope -f tests/module.js | dot -Tpng | feh -

You can tweak the depth of the generated diagram.  See =tests/module.js= for an
example, and =lib/scope/scope-analysis.js= for the documentation.  Beware that
generated diagrams can be quite large if depth has a seemingly-small value
like 3.

*** Combining layers
Layers can be combined by adding multiple ~-l~ flags.  The order of the flags
define the order of precedence between each layer.

For instance, activate both the =facets= and =scope= layers to generate scope
diagrams of code under faceted evaluation:

: ./njs -l facets -l scope -f tests/fenton.js

The =trace= layer outputs the type of the AST node executed by the parser, and
can be combined with any layer:

: ./njs -l facets -l trace tests/fenton.js
